import telebot
from telebot import types
import json
import datetime
import os

BOT_TOKEN = '7059297292:AAEJxAeGBJWISqUj_kjJWAqt1ePh-JpNGTA'
ADMINS = [7805656632, 6307467830]
ADMIN_CHAT_ID = -1002819687378

bot = telebot.TeleBot(BOT_TOKEN)

works_bot = True  # True - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, False - —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
user_orders = {}
blocked_users = set()

USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(users), f, ensure_ascii=False)

all_users = load_users()

services = {
    "account_delete": ("–°–Ω–µ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç", "100 –≥—Ä–Ω"),
    "deanon": ("–î–µ–∞–Ω–æ–Ω", "70 –≥—Ä–Ω"),
    "fraud": ("–í–∞–ª–∏–¥", "90 –≥—Ä–Ω"),
    "channel_delete": ("–°–Ω–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª", "120 –≥—Ä–Ω"),
    "email_delete": ("–°–Ω–µ—Å—Ç–∏ email –ø–æ—á—Ç–∏", "90 –≥—Ä–Ω"),
    "card_block": ("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", "230 –≥—Ä–Ω")
}


@bot.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    if cid in blocked_users:
        bot.send_message(cid, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    all_users.add(cid)
    save_users(all_users)

    kb = types.InlineKeyboardMarkup()

    if works_bot:
        kb.add(types.InlineKeyboardButton("üì¶ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order"))
    else:
        kb.add(types.InlineKeyboardButton("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö", callback_data="disabled"))

    kb.add(
        types.InlineKeyboardButton("üìù –û—Ç–∑—ã–≤—ã", url="https://t.me/BetaForm_01"),
        types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/BetaForm_01"),
        types.InlineKeyboardButton("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url="https://t.me/klas03")
    )

    if cid in ADMINS:
        status_text = "–í–´–ö–õ" if not works_bot else "–í–ö–õ"
        kb.add(types.InlineKeyboardButton(f"üîê –ê–¥–º–∏–Ω –º–µ–Ω—é (–±–æ—Ç {status_text})", callback_data="admin_menu"))

    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    global works_bot
    cid = call.message.chat.id

    if call.data == "order":
        if not works_bot and cid not in ADMINS:
            bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", show_alert=True)
            return

        kb = types.InlineKeyboardMarkup()
        for key, (name, price) in services.items():
            kb.add(types.InlineKeyboardButton(f"{name} ‚Äì {price}", callback_data=f"service_{key}"))
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", cid, call.message.message_id, reply_markup=kb)

    elif call.data.startswith("service_"):
        if not works_bot and cid not in ADMINS:
            bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", show_alert=True)
            return

        service_key = call.data[len("service_"):]
        if service_key not in services:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        service_name = services[service_key][0]
        user_orders[cid] = service_name
        bot.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ '{service_name}' –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", cid, call.message.message_id)
        notify_admins(call.from_user, service_key)
        log_order(call.from_user, service_name)

    elif call.data == "back":
        start(call.message)

    elif call.data == "admin_menu" and cid in ADMINS:
        status_text = "–í–´–ö–õ" if not works_bot else "–í–ö–õ"
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üì• –ó–∞–∫–∞–∑—ã", callback_data="view_orders"),
            types.InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"),
            types.InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user"),
            types.InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user"),
            types.InlineKeyboardButton(f"‚öôÔ∏è –ë–æ—Ç {status_text}", callback_data="toggle_bot")
        )
        bot.edit_message_text("üîê –ê–¥–º–∏–Ω –º–µ–Ω—é:", cid, call.message.message_id, reply_markup=kb)

    elif call.data == "toggle_bot" and cid in ADMINS:
        works_bot = not works_bot

        if not works_bot:
            for uid in all_users:
                try:
                    bot.send_message(uid, "‚ö†Ô∏è –ë–æ—Ç —É—à—ë–ª –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è!")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
        else:
            for uid in all_users:
                try:
                    bot.send_message(uid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞—Ö–æ–¥–∏ –∏ –∑–∞–∫–∞–∑—ã–≤–∞–π.")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

        status = "–≤–∫–ª—é—á–µ–Ω" if works_bot else "–≤—ã–∫–ª—é—á–µ–Ω"
        bot.answer_callback_query(call.id, f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å {status}.")

        status_text = "–í–´–ö–õ" if not works_bot else "–í–ö–õ"
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üì• –ó–∞–∫–∞–∑—ã", callback_data="view_orders"),
            types.InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"),
            types.InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user"),
            types.InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user"),
            types.InlineKeyboardButton(f"‚öôÔ∏è –ë–æ—Ç {status_text}", callback_data="toggle_bot")
        )
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=kb)

    elif call.data == "view_orders":
        text = "üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
        for uid, service in user_orders.items():
            text += f"üë§ {uid} ‚Äî {service}\n"
        bot.send_message(cid, text if user_orders else "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

    elif call.data == "add_admin":
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º:")
        bot.register_next_step_handler(call.message, process_add_admin)

    elif call.data == "remove_admin":
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
        bot.register_next_step_handler(call.message, process_remove_admin)

    elif call.data == "block_user":
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(call.message, process_block_user)

    elif call.data == "unblock_user":
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(call.message, process_unblock_user)

    elif call.data.startswith("take_"):
        parts = call.data.split("_")
        if len(parts) < 3:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return
        uid = int(parts[1])
        service_key = parts[2]
        service_name = services.get(service_key, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞",))[0]
        if call.from_user.id in ADMINS:
            try:
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                for admin_id in ADMINS:
                    if admin_id != call.from_user.id:
                        bot.send_message(admin_id, f"‚ÑπÔ∏è –ó–∞–∫–∞–∑ –æ—Ç {uid} ({service_name}) —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ —É @{call.from_user.username or call.from_user.id}.")
                bot.send_message(call.message.chat.id, f"‚úÖ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–æ–º @{call.from_user.username or call.from_user.id}.")
                bot.send_message(uid, f"üë®‚Äçüíº –í–∞—à –∑–∞–∫–∞–∑ '{service_name}' –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É:", e)


@bot.callback_query_handler(func=lambda call: call.data == "disabled")
def disabled_notice(call):
    bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö. –ó–∞–∫–∞–∑—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", show_alert=True)


def process_add_admin(message):
    try:
        new_id = int(message.text)
        if new_id not in ADMINS:
            ADMINS.append(new_id)
            bot.send_message(message.chat.id, f"‚úÖ {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è {new_id} —É–∂–µ –∞–¥–º–∏–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")


def process_remove_admin(message):
    try:
        rem_id = int(message.text)
        if rem_id in ADMINS:
            ADMINS.remove(rem_id)
            bot.send_message(message.chat.id, f"‚ùå {rem_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è {rem_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")


def process_block_user(message):
    try:
        uid = int(message.text)
        blocked_users.add(uid)
        bot.send_message(message.chat.id, f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")


def process_unblock_user(message):
    try:
        uid = int(message.text)
        blocked_users.discard(uid)
        bot.send_message(message.chat.id, f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")


def notify_admins(user, service_key):
    service_name = services.get(service_key, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞",))[0]
    text = f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name}\nüõ† –£—Å–ª—É–≥–∞: {service_name}\nüïí –í—Ä–µ–º—è: —Å–µ–π—á–∞—Å"
    order_btn = types.InlineKeyboardMarkup()
    order_btn.add(types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{user.id}_{service_key}"))
    for admin_id in ADMINS:
        bot.send_message(admin_id, text)
    bot.send_message(ADMIN_CHAT_ID, text, reply_markup=order_btn)


def log_order(user, service_name):
    order = {
        "user_id": user.id,
        "username": user.username,
        "service": service_name,
        "timestamp": datetime.datetime.now().isoformat()
    }
    try:
        with open("orders_log.json", "a", encoding="utf-8") as f:
            f.write(json.dumps(order, ensure_ascii=False) + "\n")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", e)


print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling()
